So I want to have the main selector class, as well as a class that handles the storing of recipies I can then make requests using
the main object that make use of these recipies for information. What are our goals as this will determine class structure

1. Store numerous recipies, likely in text files that we can then read from to load up information. 
2. allow for sorting of receipies based on factors like key ingredients, cooking time etc. 
3. allow for the inclusion of new recipies into the system 
4. Separate food items into breakfasts, lunches, and dinners 
5. Allow for some form of random, or curated selction of foods, as well as specific requesting of them

So we need a class for recipies, that will hold their information, and we likely want some form of recipie collection?
Using specific collections of set types will allow for easier searching, we finally want a main class that will take in the search 
requirements and make a search through the others

Let's say two namespaces, Staff and information namespaces 
The Staff namespace contains the criteria specification class and the functionality for using it to make specific requests
The information namespace contains the recipie and recipie collection classes as well as the functions for retrieving 
information from them

---------- Staff Namespace ----------
So we have in this class four main tasks
    1. get the selection criteria
    2. store the selection criteria
    3. make the selection of appropriate recipies 
    4. select and output some number of these appropriate recipies 

    MrDeeds the concierge class can handle the user interaction
    A ticket class can store the requirements 
    A selector class can have selector methods that use the ticket information to acquire some number of recipies

    This is basically the control layer of the project that does the brunt of the work

---------- Info Namespace ----------
Here we have only three main tasks 
Store recipie information
Store collections of related recipies based on some criteria 
Provide access to collections and individual recipie information in the form of an API.

what should a basic recipie hold

1. name
2. ingredients 
3. method

All of these are strings, the ingredients could be an array of strings but likely not required, can consider if it becomes handy later 

so a Recipie book is a collection of recipies that fit some criteria, for now we can leave the criteria blank and just use one 
but in the future to prevent having to re-create them when something changes they should have a condition that is unlikely to change
such as a different book for breakfasts, lunches, and dinners.

added in a way to create new recipie objects, and store them as strings, which will help with making the recipie books.
We'll need some way of storing them in a file and reading them from a file,
can use an ASCII control char to separate recipies, and another to separate parts within a recipie

we want to store recipies as a file per book? Or maybe multiple files per book depending on how many we have. 
This can change as we add more things to sort by, for now we'll do a file per book.

The book contains a name, a type specifier, a recipie list, and a filepath.
The name is the name of the book for ease of display, 
the specifier is what type of recipies it holds (currently blank)
the list holds the recipie objects it loads when needed 
the filepath is the path to the file that stores its data in hard memory 

should we use a DB instead? With a DB it's easier to do searches, each recipe book could be its own table
and then we don't need to worry so much about keeping fies correct. Yeh we'll try an SQL-Server DB 

---------- Creating DB Functionality ----------
So SQL Server is downloaded, now need to set up some form of config file

okay so the connection is set up 
following this tutorial 
https://www.guru99.com/c-sharp-access-database.html#:~:text=C%23%20can%20execute%20'SQL'%20select,insert%20records%20into%20the%20database.

will need to make a database for this 
okay database made and connected to
will need to use ASCII control char to represent newlines as SQL-Server doesn't care about \n 
Then when we are writing to the database we replace \n with this control char 
and when we are reading we replace that control char with \n.


okay issue

Database needs to know what a recipie is, so needs to be using Info namespace
If we want AddRecipie to insert into database it needs to be able to call database stuff, needs to be using Control namespace 

this IS legal since C# allows circular namespaces apparently, but I would really like to avoid it, so instead 
I'll make an AddRecipie call in control? 

let's redefine the structure

Main control of program is the program class, it handles UI interaction through console (and later UI) 
Instructions through program will modify database content
We want to store modifications in different places 
    Concierge handles selection of options
    Information handles creation and access of recipies
Both of these need to use the database for this 
Database cannot know about their internal classes (recipies and user requirements) without circular dependencies 
However Database needs to be able to use the information from those in it's queries
Could have the Concierge and the information classes do SQL conversion internally but that's a bit messy
Could have the database class call their methods, but this changes the functionality of the DB class 

Instead of config, it would be control, and it would act as a collection of the main functions,
AddRecipie
RemoveRecipie
SelectRecipie (via criteria)

We have group, unit and record separators, leave toString alone and make a 
Record.toDatabaseEntry() function

YAAAAAY

can insert directly into DB now

next up we want to handle recipie books, but first we need to set up more parts of recipies 
so that we have a better idea what each recipie book should hold, i.e. what to we divide recipies by

To store a list of flavoiurs we're going to need to get creative, we need to create a special 
table for each recipie book, e.g. breakfast-flavours if we're sorting books by breakfast, lunch, etc. 
and in this table there is two rows, the name of the dish and the name of a flavour, these make a primary key 
keeping the tuples unique, and to search by flavour we would do something like 

select name from breakfast-flavours where flavour equals "spicy"

then we take this list and select from breakfast where name is in the list, 

AH this would be bad actually, we couldn't get all the flavours in a recipue without searching flavours again 

I can't see a way around this, since there's no way to join multiple flavours on anyway as far as I can tell, 
so what I'll do is select all the names, return them, and when the user makes their selection the full request for all the 
info is made across multiple tables, so we do the expensive work only for the final choice.

Polina has suggested a keyword based system, where each recipe has some number of keywords, which 
would include things like flavours and meal time etc. this list would need to be fixed however if 
we wanted to make it both searchable and part of the recipie, then we would need to have them be unordered,
this isn't that big a deal, could have like 

/\/\/\/\/\/\/\/\/\/\/\/\
Name:
Ingredients:
Steps:
Tags: 
/\/\/\/\/\/\/\/\/\/\/\/\

and just display tags in whatever order they come back in, they're not really that essential
oh need to sanatise inputs at some point

take the list of tags as CSV? Or like we have been? 
no chance of commas in the list of tags so can do CSV for this

okay, so I did 

create table test_tags (
    name varchar(100),
    tag varchar(50),
    primary key(name, tag),
    foreign key(name) references test(name)
)

and then set up a system where it will take in tags as part of the input process and then insert them into the test_tags DB

can then use a query like 

select * from test where name = (select name from test_tags where tag = 'testVal')

to get out our test recipie after the following two statements were generated by the program

INSERT INTO test (name,ingredients,steps) VALUES('test','1. a▼2. b▼3. c▼4. d','1. x▼2. y▼3. z')
INSERT INTO test_tags (name, tag) VALUES('test','testVal'),('test','testVal2'),('test','testVal3')



